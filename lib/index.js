module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t){e.exports=require("react")},function(e,t,r){"use strict";r.r(t),r.d(t,"GoogleButton",(function(){return h}));var n,o=r(0),c=r.n(o);!function(e){e.GOOGLE_OAUTH_ENDPOINT="https://accounts.google.com/o/oauth2/v2/auth"}(n||(n={}));var i=function(){function e(e,t){var r=this;this.redirect=function(e){if(!r.googleRedirectURL)throw new ReferenceError("Error creating redirect url to Google's authorization server");window.location.replace(r.googleRedirectURL)},this.params=e,this.scopesStr=t}return Object.defineProperty(e.prototype,"googleRedirectURL",{get:function(){return this._googleRedirectURL},set:function(e){this._googleRedirectURL=e},enumerable:!1,configurable:!0}),e.prototype.createAuthorizationRequestURL=function(){var e,t=this.params,r=t.accessType,o=t.includeGrantedScopes,c=void 0===o||o,i=t.responseType,a=void 0===i?"code":i,u=t.state,s=void 0===u?null:u,l=t.redirectUri,p=t.clientId;e=n.GOOGLE_OAUTH_ENDPOINT+"?scope="+this.scopesStr+"&",e=(e=(e=r?e+"access_type="+r+"&":e)+"include_granted_scopes="+c+"&")+"response_type="+a+"&",e=(e=(e=s?e+"state="+s+"&":e)+"redirect_uri="+l+"&")+"client_id="+p,this.googleRedirectURL=e},e.createScopes=function(e){var t="";return e.map((function(r,n){e.length-1===n?t+=""+r:t+=r+"%20"})),t},e}(),a=function(e,t,r,n){return new(r||(r=Promise))((function(o,c){function i(e){try{u(n.next(e))}catch(e){c(e)}}function a(e){try{u(n.throw(e))}catch(e){c(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}u((n=n.apply(e,t||[])).next())}))},u=function(e,t){var r,n,o,c,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return c={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function a(c){return function(a){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&c[0]?n.return:c[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,c[1])).done)return o;switch(n=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,n=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],n=0}finally{r=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}};function s(e){var t=e.email,r=void 0===t?"":t,n=e.code;(function(e,t){return a(this,void 0,void 0,(function(){return u(this,(function(r){switch(r.label){case 0:return[4,fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})];case 1:return[2,r.sent().json()]}}))}))})(e.apiUrl,{code:n,email:r,scope:e.scope}).then((function(t){e.setResponseState({accessToken:t.access_token})})).catch((function(t){e.setResponseState({error:t})}))}var l=function(){return(l=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},p={},d={backgroundSize:"20px 20px",backgroundRepeat:"no-repeat",backgroundPosition:"12px 10px",textIndent:"19px",border:"1px solid #bdc3c7",padding:"9px 23px",borderRadius:"9px",backgroundColor:"#bdc3c7",fontSize:"18px"},f=c.a.createContext({queryParamsCode:!1}),g=(f.Provider,f.Consumer,function(e){var t=e.placeholder,r=void 0===t?"":t,n=e.defaultStyle,o=void 0===n||n,a=e.options,u=i.createScopes(a.scopes),s=new i(a,u);s.createAuthorizationRequestURL();var p=o?function(e,t){return e?l(l({},t),{backgroundImage:"url("+e+")"}):t}(r,d):void 0;return c.a.createElement("button",{style:p,onClick:s.redirect},"Sign in with google")}),h=function(e){var t,r=e.callback,n=Object(o.useState)(p),i=n[0],a=n[1],u=new URLSearchParams(window.location.search),d=u.get("code"),f=u.get("error");return i.accessToken?(t=i.accessToken,window.localStorage.setItem("accessToken",t),console.debug("`accessToken` set in local storage."),null):i.error?(console.error("Error: Api call failed with "+f+" error."),c.a.createElement(g,l({},e,{error:i.error}))):d?(s({email:u.get("email")||"",scope:u.get("scope")||"",code:d,client_id:e.options.clientId,apiUrl:e.apiUrl,responseState:i,setResponseState:a}),console.debug("Waiting for remote api response"),r?r():c.a.createElement(c.a.Fragment,null,"Loading...")):f?(console.error("Error: Google login attempt failed with "+f+" error."),c.a.createElement(g,l({},e,{error:f}))):c.a.createElement(g,l({},e))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,