module.exports=function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t){e.exports=require("react")},function(e,t,r){"use strict";r.r(t),r.d(t,"GoogleButton",(function(){return w})),r.d(t,"isLoggedIn",(function(){return i})),r.d(t,"logOutOAuthUser",(function(){return s})),r.d(t,"createOAuthHeaders",(function(){return u}));var o=function(){return(o=Object.assign||function(e){for(var t,r=1,o=arguments.length;r<o;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=function(e,t,r,o){return new(r||(r=Promise))((function(n,c){function a(e){try{s(o.next(e))}catch(e){c(e)}}function i(e){try{s(o.throw(e))}catch(e){c(e)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,i)}s((o=o.apply(e,t||[])).next())}))},c=function(e,t){var r,o,n,c,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return c={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function i(c){return function(i){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,o&&(n=2&c[0]?o.return:c[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,c[1])).done)return n;switch(o=0,n&&(c=[2&c[0],n.value]),c[0]){case 0:case 1:n=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,o=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!(n=a.trys,(n=n.length>0&&n[n.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!n||c[1]>n[0]&&c[1]<n[3])){a.label=c[1];break}if(6===c[0]&&a.label<n[1]){a.label=n[1],n=c;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(c);break}n[2]&&a.ops.pop(),a.trys.pop();continue}c=t.call(e,a)}catch(e){c=[6,e],o=0}finally{r=n=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,i])}}};function a(e){var t=e.email,r=void 0===t?"":t,a=e.code;(function(e,t){return n(this,void 0,void 0,(function(){return c(this,(function(r){switch(r.label){case 0:return[4,fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})];case 1:return[2,r.sent().json()]}}))}))})(e.apiUrl,{code:a,email:r,scope:e.scope}).then((function(t){"access_token"in t?e.setResponseState({accessToken:t.access_token}):e.setResponseState({error:"No access_token in response data!"})})).catch((function(t){e.setResponseState(o(o({},e.responseState),{error:t.message,accessToken:void 0}))}))}function i(){return!!window.localStorage.getItem("accessToken")}function s(){window.localStorage.removeItem("accessToken")}function u(){return{"Content-type":"application/jsons","X-Auth-Token":"Bearer "+window.localStorage.getItem("accessToken")}}function l(){var e=document.location.href;if(document.location.search){var t=e.substring(0,e.indexOf("?"));window.history.replaceState({},document.title,t)}}var p,d=r(0),f=r.n(d);!function(e){e.GOOGLE_OAUTH_ENDPOINT="https://accounts.google.com/o/oauth2/v2/auth"}(p||(p={}));var g=function(){function e(e,t){var r=this;this.redirect=function(e){if(!r.googleRedirectURL)throw new ReferenceError("Error creating redirect url to Google's authorization server");window.location.replace(r.googleRedirectURL)},this.params=e,this.scopesStr=t}return Object.defineProperty(e.prototype,"googleRedirectURL",{get:function(){return this._googleRedirectURL},set:function(e){this._googleRedirectURL=e},enumerable:!1,configurable:!0}),e.prototype.createAuthorizationRequestURL=function(){var e,t=this.params,r=t.accessType,o=void 0===r?"offline":r,n=t.includeGrantedScopes,c=void 0===n||n,a=t.responseType,i=void 0===a?"code":a,s=t.state,u=void 0===s?null:s,l=t.redirectUri,d=t.clientId;e=p.GOOGLE_OAUTH_ENDPOINT+"?scope="+this.scopesStr+"&",e=(e=(e=o?e+"access_type="+o+"&":e)+"include_granted_scopes="+c+"&")+"response_type="+i+"&",e=(e=(e=u?e+"state="+u+"&":e)+"redirect_uri="+l+"&")+"client_id="+d,this.googleRedirectURL=e},e.createScopes=function(e){var t="";return e.map((function(r,o){e.length-1===o?t+=""+r:t+=r+"%20"})),t},e}(),h=function(){return(h=Object.assign||function(e){for(var t,r=1,o=arguments.length;r<o;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},b={},y={backgroundSize:"20px 20px",backgroundRepeat:"no-repeat",backgroundPosition:"12px 10px",textIndent:"19px",border:"1px solid #bdc3c7",padding:"9px 23px",borderRadius:"9px",backgroundColor:"#bdc3c7",fontSize:"18px"},v=f.a.createContext({queryParamsCode:!1}),m=(v.Provider,v.Consumer,function(e){var t=e.placeholder,r=void 0===t?"":t,o=e.defaultStyle,n=void 0===o||o,c=e.options,a=(e.displayErrors,g.createScopes(c.scopes)),i=new g(c,a);i.createAuthorizationRequestURL();var s=n?function(e,t){return e?h(h({},t),{backgroundImage:"url("+e+")"}):t}(r,y):void 0;return e.error&&console.error("[React-Google-OAuth2] Error: "+e.error+"\n         - To display the error to the user, set IGoogleProps displayErrors to true.\n         See https://joegasewicz.github.io/react-google-oauth2.0/"),l(),f.a.createElement(f.a.Fragment,null,f.a.createElement("button",{style:s,onClick:i.redirect},"Sign in with google"),e.displayErrors&&e.error&&f.a.createElement("div",null,e.error))}),w=function(e){var t,r=e.callback,o=Object(d.useState)(b),n=o[0],c=o[1],s=new URLSearchParams(window.location.search),u=s.get("code"),p=s.get("error");if(n.accessToken&&!i())return t=n.accessToken,window.localStorage.setItem("accessToken",t),console.debug("`accessToken` set in local storage."),null;if(n.error)return console.error("[React-Google-OAuth2] Error: Api call failed with "+n.error+" error."),f.a.createElement(m,h({},e,{error:n.error}));if(u&&!i()){var g={email:s.get("email")||"",scope:s.get("scope")||"",code:u,client_id:e.options.clientId,apiUrl:e.apiUrl,responseState:n,setResponseState:c};return l(),a(g),console.debug("Waiting for remote api response"),r?r():f.a.createElement(f.a.Fragment,null,"Loading...")}return p?(console.error("Error: Google login attempt failed with "+p+" error."),f.a.createElement(m,h({},e,{error:p}))):f.a.createElement(m,h({},e))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1nb29nbGUtb2F1dGgvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVhY3QtZ29vZ2xlLW9hdXRoL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly9yZWFjdC1nb29nbGUtb2F1dGgvLi9zcmMvX2FwaVV0aWxzLnRzIiwid2VicGFjazovL3JlYWN0LWdvb2dsZS1vYXV0aC8uL3NyYy9hdXRob3JpemF0aW9uLnRzIiwid2VicGFjazovL3JlYWN0LWdvb2dsZS1vYXV0aC8uL3NyYy9jb21wb25lbnRzLnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJzZXJ2ZXJSZXNwb25zZSIsInByb3BzIiwiZW1haWwiLCJjb2RlIiwiYXBpVXJsIiwicGF5bG9hZCIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwianNvbiIsInBvc3RUb0V4Y2hhbmdlQXBpVXJsIiwic2NvcGUiLCJ0aGVuIiwiZGF0YSIsInNldFJlc3BvbnNlU3RhdGUiLCJhY2Nlc3NUb2tlbiIsImFjY2Vzc190b2tlbiIsImVycm9yIiwiY2F0Y2giLCJlcnIiLCJyZXNwb25zZVN0YXRlIiwibWVzc2FnZSIsInVuZGVmaW5lZCIsImlzTG9nZ2VkSW4iLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibG9nT3V0T0F1dGhVc2VyIiwicmVtb3ZlSXRlbSIsImNyZWF0ZU9BdXRoSGVhZGVycyIsInJlbW92ZU9BdXRoUXVlcnlQYXJhbXMiLCJjdXJyZW50TG9jYXRpb24iLCJkb2N1bWVudCIsImxvY2F0aW9uIiwiaHJlZiIsInNlYXJjaCIsImNsZWFuX3VyaSIsInN1YnN0cmluZyIsImluZGV4T2YiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwidGl0bGUiLCJHb29nbGVBUElDb25uZWN0aW9uU3RyaW5ncyIsInBhcmFtcyIsInNjb3Blc1N0ciIsInJlZGlyZWN0IiwiZSIsImdvb2dsZVJlZGlyZWN0VVJMIiwiUmVmZXJlbmNlRXJyb3IiLCJyZXBsYWNlIiwidGhpcyIsIl9nb29nbGVSZWRpcmVjdFVSTCIsImNyZWF0ZUF1dGhvcml6YXRpb25SZXF1ZXN0VVJMIiwidXJsIiwiYWNjZXNzVHlwZSIsImluY2x1ZGVHcmFudGVkU2NvcGVzIiwicmVzcG9uc2VUeXBlIiwic3RhdGUiLCJyZWRpcmVjdFVyaSIsImNsaWVudElkIiwiR09PR0xFX09BVVRIX0VORFBPSU5UIiwiY3JlYXRlU2NvcGVzIiwic2NvcGVzIiwic3RyIiwibWFwIiwibGVuZ3RoIiwiU0VSVkVSX1JFU1BPTlNFX1NUQVRFIiwiYnV0dG9uU3R5bGluZyIsImJhY2tncm91bmRTaXplIiwiYmFja2dyb3VuZFJlcGVhdCIsImJhY2tncm91bmRQb3NpdGlvbiIsInRleHRJbmRlbnQiLCJib3JkZXIiLCJwYWRkaW5nIiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwiZm9udFNpemUiLCJHb29nbGVBdXRoQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJxdWVyeVBhcmFtc0NvZGUiLCJJbm5lckJ1dHRvbiIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJwbGFjZWhvbGRlciIsImRlZmF1bHRTdHlsZSIsIm9wdGlvbnMiLCJBdXRob3JpemF0aW9uIiwiYXV0aCIsInN0eWxlcyIsImJhY2tncm91bmRJbWFnZSIsIl9nZXRCYWNrZ3JvdW5kSW1nIiwiY29uc29sZSIsInN0eWxlIiwib25DbGljayIsImRpc3BsYXlFcnJvcnMiLCJHb29nbGVCdXR0b24iLCJ0b2tlbiIsImNhbGxiYWNrIiwiY3VycmVudFVybCIsIlVSTFNlYXJjaFBhcmFtcyIsInF1ZXJ5UGFyYW1zRXJyb3IiLCJzZXRJdGVtIiwiZGVidWciLCJzZXJ2ZXJSZXNwb25zZVByb3BzIiwiY2xpZW50X2lkIl0sIm1hcHBpbmdzIjoiMkJBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBMERmLE9BckRBRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FB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ZTBHLEdBQ2ZaLFFBQVFXLE1BQU0sbUNBQ1BMLEVBQVdBLElBQWEsa0RBQzVCLE9BQUdHLEdBQ05ULFFBQVExRSxNQUFNLDJDQUEyQ21GLEVBQWdCLFdBQ2xFLGtCQUFDcEIsRUFBVyxLQUFLbEYsRUFBSyxDQUFFbUIsTUFBT21GLE1BR25DLGtCQUFDcEIsRUFBVyxLQUFLbEYiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTsiLCIvKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIElQYXlsb2FkIHtcbiAgICByZWFkb25seSBlbWFpbDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNvZGU6IHN0cmluZztcbiAgICByZWFkb25seSBzY29wZTogc3RyaW5nO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGludGVyZmFjZSBJQXBpUmVzcG9uc2VEYXRhIHsgcmVhZG9ubHkgYWNjZXNzX3Rva2VuOiBzdHJpbmc7IH1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0VG9FeGNoYW5nZUFwaVVybChhcGlVcmw6IHN0cmluZywgcGF5bG9hZDogSVBheWxvYWQpOiBQcm9taXNlPElBcGlSZXNwb25zZURhdGE+IHtcbiAgICBjb25zdCByZXM6IFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzLmpzb24oKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJ2ZXJSZXNwb25zZShwcm9wczogYW55KTogdm9pZCB7XG4gICAgY29uc3QgeyBlbWFpbCA9IFwiXCIsIGNvZGUsIGFwaVVybCwgc2NvcGUgfSA9IHByb3BzO1xuICAgIGNvbnN0IHBheWxvYWQ6IElQYXlsb2FkID0geyBjb2RlLCBlbWFpbCwgc2NvcGUgfTtcbiAgICBwb3N0VG9FeGNoYW5nZUFwaVVybChhcGlVcmwsIHBheWxvYWQpXG4gICAgICAgIC50aGVuKChkYXRhOiBJQXBpUmVzcG9uc2VEYXRhKSA9PiB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgcmVzcG9uc2VTdGF0ZSBhY2Nlc3NUb2tlblxuICAgICAgICAgICAgaWYoIShcImFjY2Vzc190b2tlblwiIGluIGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMuc2V0UmVzcG9uc2VTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBcIk5vIGFjY2Vzc190b2tlbiBpbiByZXNwb25zZSBkYXRhIVwiLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9wcy5zZXRSZXNwb25zZVN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGRhdGEuYWNjZXNzX3Rva2VuLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgcHJvcHMuc2V0UmVzcG9uc2VTdGF0ZSh7XG4gICAgICAgICAgICAgICAgLi4ucHJvcHMucmVzcG9uc2VTdGF0ZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQWNjZXNzVG9rZW4odG9rZW46IHN0cmluZyk6IHZvaWQge1xuICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJhY2Nlc3NUb2tlblwiLCB0b2tlbik7XG59XG5cbi8qKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogIGlmKGlzTG9nZ2VkSW4oKSkgeyAvLyByZXR1cm5zIHRydWUgaXMgYWNjZXNzVG9rZW4gZXhpc3RzIGluIExvY2FsU3RvcmFnZVxuICogICAgICAvLyB1c2VyIGxvZ2dlZCBjb2RlLi4uXG4gKiAgfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xvZ2dlZEluKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImFjY2Vzc1Rva2VuXCIpO1xufVxuXG4vKipcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqICBsb2dPdXRPQXV0aFVzZXIoKSAvLyByZW1vdmVzIHRoZSBhY2Nlc3NUb2tlbiBmcm9tIExvY2FsU3RvcmFnZVxuICogYGBgXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvZ091dE9BdXRoVXNlcigpOiB2b2lkIHtcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJhY2Nlc3NUb2tlblwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRBY2Nlc3NUb2tlbigpIHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYWNjZXNzVG9rZW5cIik7XG59XG5cbi8qKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogIGZldGNoKHVybCwge1xuICogICAgICBoZWFkZXJzOiBjcmVhdGVPQXV0aEhlYWRlcnMoKSxcbiAqICB9KVxuICogYGBgXG4gKiBAcmV0dXJuIE9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT0F1dGhIZWFkZXJzKCk6IE9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJDb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uc1wiLFxuICAgICAgICBcIlgtQXV0aC1Ub2tlblwiOiBgQmVhcmVyICR7X2dldEFjY2Vzc1Rva2VuKCl9YFxuICAgIH1cbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU9BdXRoUXVlcnlQYXJhbXMoKTogdm9pZCB7XG4gICAgY29uc3QgY3VycmVudExvY2F0aW9uID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcbiAgICBpZihkb2N1bWVudC5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgICAgY29uc3QgY2xlYW5fdXJpID0gY3VycmVudExvY2F0aW9uLnN1YnN0cmluZygwLCBjdXJyZW50TG9jYXRpb24uaW5kZXhPZihcIj9cIikpO1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCBjbGVhbl91cmkpO1xuICAgIH1cbn1cbiIsIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBlbnVtIEdvb2dsZUFQSUNvbm5lY3Rpb25TdHJpbmdzIHtcbiAgICBHT09HTEVfT0FVVEhfRU5EUE9JTlQgPSBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoXCIsXG59XG4vKiogQHB1YmxpYyAqL1xuaW50ZXJmYWNlIElBdXRob3JpemF0aW9uQmFzZSB7XG4gICAgLyoqIFRoaXMgaXMgeW91ciBjbGllbnQgSUQgKi9cbiAgICBjbGllbnRJZDogc3RyaW5nO1xuICAgIC8qKiBXaGVyZSB5b3UgUmVhY3QgYXBwIHNob3VsZCByZWRpcmVjdCB0byBpZiB1c2VyIGhhcyBzdWNjZXNzZnVsbHkgbG9nZ2VkIGluICoqL1xuICAgIHJlZGlyZWN0VXJpOiBzdHJpbmc7XG4gICAgLyoqIEJ5IGRlZmF1bHQgdGhpcyBpcyBzZXQgdG8gKmNvZGUqICovXG4gICAgcmVzcG9uc2VUeXBlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgYXBpICoqYXBpVXJsKioge0BsaW5rIElHb29nbGVCdXR0b259IGNhbiByZWZyZXNoIHRva2VucyBvbiB0aGUgdXNlcidzXG4gICAgICogYmVoYWxmLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAqb25saW5lKiBidXQgaWYgeW91ciBiYWNrZW5kIGFwaSB3aWxsIHJlZnJlc2ggdGhlIHRva2VuIHRoZW5cbiAgICAgKiB5b3UgbXVzdCBwYXNzIGluIGEgc3RyaW5nIHZhbHVlIG9mICpvZmZsaW5lKiAoVGhpcyBpcyByZWNvbW1lbmRlZCBmb3IgcmVhY3QgYXBwcyBjb25uZWN0ZWRcbiAgICAgKiB0byBhIFJFU1QgYXBpIGJhY2tlbmQpLlxuICAgICAqL1xuICAgIGFjY2Vzc1R5cGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhpcyBvcHRpb24gaXMgY3VycmVudGx5IHVuYXZhaWxhYmxlIGJ1dCB3aWxsIGJlIGluIGEgYWRkZWQgaW4gYSBmdXR1cmUgdmVyc2lvbixcbiAgICAgKiBUT0RPIC0gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2VnYXNld2ljei9yZWFjdC1nb29nbGUtb2F1dGgyLjAvaXNzdWVzLzNcbiAgICAgKiAqL1xuICAgIHN0YXRlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmF1bHRlZCB0byB0cnVlLiBBbnkgZXh0cmEgc2NvcGVzIHRoZSBsb2dnZWQgaW4gdXNlciBwcmV2aW91c2x5IGdyYW50ZWRcbiAgICAgKiB3aWxsIGJlIGF2YWlsYWJsZSB3aXRoaW4gdGhlIG5ldyBhY2Nlc3MgdG9rZW4uXG4gICAgICogKi9cbiAgICBpbmNsdWRlR3JhbnRlZFNjb3Blcz86IGJvb2xlYW47XG4gICAgLyoqIE5vdCByZXF1aXJlZCwgb3B0aW9uYWwuIEZvciBwcmVmaWxsaW5nIGVtYWlsIGZpZWxkcyBldGMuICovXG4gICAgbG9naW5IaW50Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE5vdCByZXF1aXJlZCwgb3B0aW9uYWwuIEEgc3BhY2UtZGVsaW1pdGVkLCBjYXNlLXNlbnNpdGl2ZSBsaXN0IG9mIHByb21wdHMgdG9cbiAgICAgKiBwcmVzZW50IHRoZSB1c2VyLiBJZiB5b3UgZG9uJ3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciwgdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZFxuICAgICAqIG9ubHkgdGhlIGZpcnN0IHRpbWUgeW91ciBwcm9qZWN0IHJlcXVlc3RzIGFjY2Vzcy5cbiAgICAgKiAqL1xuICAgIHByb21wdD86IHN0cmluZztcbn1cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIElBdXRob3JpemF0aW9uT3B0aW9ucyBleHRlbmRzIElBdXRob3JpemF0aW9uQmFzZSB7XG4gICAgc2NvcGVzOiBBcnJheTxzdHJpbmc+O1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGludGVyZmFjZSBJQXV0aG9yaXphdGlvbiB7XG4gICAgcGFyYW1zOiBJQXV0aG9yaXphdGlvbk9wdGlvbnM7XG4gICAgLyoqIFNldCB0byAgYFtcIm9wZW5pZFwiLCBcInByb2ZpbGVcIl1gIGJ5IGRlZmF1bHQgKiovXG4gICAgc2NvcGVzU3RyOiBzdHJpbmc7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgQXV0aG9yaXphdGlvbiBpbXBsZW1lbnRzIElBdXRob3JpemF0aW9uIHtcblxuICAgIHByaXZhdGUgX2dvb2dsZVJlZGlyZWN0VVJMPzogc3RyaW5nO1xuXG4gICAgcHVibGljIHBhcmFtczogSUF1dGhvcml6YXRpb25PcHRpb25zO1xuXG4gICAgcHVibGljIHNjb3Blc1N0cjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocGFyYW1zOiBJQXV0aG9yaXphdGlvbk9wdGlvbnMsIHNjb3Blc1N0cjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLnNjb3Blc1N0ciA9IHNjb3Blc1N0cjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcHJvcGVydHkgZ29vZ2xlUmVkaXJlY3RVUkwgQWNjZXNzIHRoZSB1cmwgZm9yIHRoZSBpbml0aWFsXG4gICAgICogYnJvd3NlciBjYWxsIHRvIEdvb2dsZSdzIE9BdXRoIDIuMCBzZXJ2ZXIuIFVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZ29vZ2xlUmVkaXJlY3RVUkwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nb29nbGVSZWRpcmVjdFVSTDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGdvb2dsZVJlZGlyZWN0VVJMKHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fZ29vZ2xlUmVkaXJlY3RVUkwgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHVibGljIGNyZWF0ZUF1dGhvcml6YXRpb25SZXF1ZXN0VVJMKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhY2Nlc3NUeXBlID0gXCJvZmZsaW5lXCIsXG4gICAgICAgICAgICBpbmNsdWRlR3JhbnRlZFNjb3BlcyA9IHRydWUsXG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSBcImNvZGVcIixcbiAgICAgICAgICAgIHN0YXRlID0gbnVsbCxcbiAgICAgICAgICAgIHJlZGlyZWN0VXJpLFxuICAgICAgICAgICAgY2xpZW50SWQsXG4gICAgICAgIH0gPSB0aGlzLnBhcmFtcztcbiAgICAgICAgY29uc3QgZG9tYWluID0gR29vZ2xlQVBJQ29ubmVjdGlvblN0cmluZ3MuR09PR0xFX09BVVRIX0VORFBPSU5UO1xuICAgICAgICBsZXQgdXJsOiBzdHJpbmc7XG4gICAgICAgIHVybCA9IGAke2RvbWFpbn0/c2NvcGU9JHt0aGlzLnNjb3Blc1N0cn0mYDtcbiAgICAgICAgdXJsID0gYWNjZXNzVHlwZSA/IGAke3VybH1hY2Nlc3NfdHlwZT0ke2FjY2Vzc1R5cGV9JmAgOiB1cmw7XG4gICAgICAgIHVybCA9IGAke3VybH1pbmNsdWRlX2dyYW50ZWRfc2NvcGVzPSR7aW5jbHVkZUdyYW50ZWRTY29wZXN9JmA7XG4gICAgICAgIHVybCA9IGAke3VybH1yZXNwb25zZV90eXBlPSR7cmVzcG9uc2VUeXBlfSZgO1xuICAgICAgICB1cmwgPSBzdGF0ZSA/IGAke3VybH1zdGF0ZT0ke3N0YXRlfSZgIDogdXJsO1xuICAgICAgICB1cmwgPSBgJHt1cmx9cmVkaXJlY3RfdXJpPSR7cmVkaXJlY3RVcml9JmA7XG4gICAgICAgIHVybCA9IGAke3VybH1jbGllbnRfaWQ9JHtjbGllbnRJZH1gO1xuICAgICAgICB0aGlzLmdvb2dsZVJlZGlyZWN0VVJMID0gdXJsO1xuICAgIH1cblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZVNjb3BlcyhzY29wZXM6IEFycmF5PHN0cmluZz4pOiBzdHJpbmcge1xuICAgICAgICBsZXQgc3RyID0gXCJcIjtcbiAgICAgICAgc2NvcGVzLm1hcCgoc2NvcGUsIGkpID0+IHtcbiAgICAgICAgICAgIGlmIChzY29wZXMubGVuZ3RoIC0gMSA9PT0gaSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSBgJHtzY29wZX1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYCR7c2NvcGV9JTIwYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyByZWRpcmVjdCA9IChlOiBhbnkpOiB2b2lkID0+IHtcbiAgICAgICAgaWYodGhpcy5nb29nbGVSZWRpcmVjdFVSTCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UodGhpcy5nb29nbGVSZWRpcmVjdFVSTClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIkVycm9yIGNyZWF0aW5nIHJlZGlyZWN0IHVybCB0byBHb29nbGUncyBhdXRob3JpemF0aW9uIHNlcnZlclwiKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQge2RlZmF1bHQgYXMgUmVhY3QsIHVzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gICAgQXV0aG9yaXphdGlvbixcbiAgICBJQXV0aG9yaXphdGlvbk9wdGlvbnMsXG59IGZyb20gXCIuL2F1dGhvcml6YXRpb25cIjtcbmltcG9ydCB7XG4gICAgc2VydmVyUmVzcG9uc2UsXG4gICAgc3RvcmVBY2Nlc3NUb2tlbixcbiAgICBpc0xvZ2dlZEluLFxuICAgIHJlbW92ZU9BdXRoUXVlcnlQYXJhbXMsXG59IGZyb20gXCIuL19hcGlVdGlsc1wiO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBJR29vZ2xlQnV0dG9uIHtcbiAgICAvKiogUGxhY2Vob2xkZXIgaW1hZ2UgZGlzcGxheWVkIG5leHQgdG8gYnV0dG9uIHRleHQgKi9cbiAgICByZWFkb25seSBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICAvKiogUmVtb3ZlIGRlZmF1bHQgc3R5bGVzLiBUaGUgcGxhY2Vob2xkZXIgcHJvcCBoYXMgbm8gZWZmZWN0IGlmIHBsYWNlaG9sZGVyIGlzIHNldCB0byBmYWxzZSAqL1xuICAgIHJlYWRvbmx5IGRlZmF1bHRTdHlsZT86IGJvb2xlYW47XG4gICAgLyoqIFNlZSBJQXV0aG9yaXphdGlvblJlcXVlc3RQYXJhbXMgKi9cbiAgICByZWFkb25seSBvcHRpb25zOiBJQXV0aG9yaXphdGlvbk9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5XG4gICAgICogQG9wdGlvbmFsXG4gICAgICogQSBSZWFjdCBjb21wb25lbnQgb3IgYW55IGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICAgKiBUaGlzIHdvdWxkIG5vcm1hbGx5IGJlIHVzZWQgdG8gZGlzcGxheSBhIHByZWxvYWRlciB0byB0aGUgdXNlciB3aGlsc3RcbiAgICAgKiB0aGUgT0F1dGgyLjAgbG9naW4gc3RyYXRlZ3kgaXMgaW4gZmxpZ2h0LiBCeSBkZWZhdWx0IGEgYExvYWRpbmcuLi5gXG4gICAgICogbWVzc2FnZSB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIDxHb29nbGVCdXR0b25cbiAgICAgKiAgICBjYWxsYmFjaz17KCkgPT4gPD5cIkxvYWRpbmcuLi5cIjwvPn1cbiAgICAgKiAgICAvLyBvdGhlciBwcm9wcy4uLlxuICAgICAqIC8+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2FsbGJhY2s/OiAoKSA9PiBSZWFjdC5SZWFjdEhUTUxFbGVtZW50PGFueT47XG4gICAgLyoqIFRoZSB1cmwgb2YgdGhlIGFwaSB0byBwZXJmb3JtIHRoZSBleGNoYW5nZSAqL1xuICAgIHJlYWRvbmx5IGFwaVVybDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsLiBEZWZhdWx0IHNldCB0byBmYWxzZS5cbiAgICAgKiBEaXNwbGF5IGFuIGVycm9yIHRvIHRoZSB1c2VyICh3aWxsIGJlIGRpc3BsYXllZCBpbiBhIGNoaWxkIGBkaXZgIGVsZW1lbnQpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpc3BsYXlFcnJvcnM/OiBib29sZWFuO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xudHlwZSBUeXBlQnV0dG9uU3R5bGVzID0geyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbi8qKiBAaW50ZXJuYWwgKi9cbmludGVyZmFjZSBJR29vZ2xlQXV0aENvbnRleHQgeyByZWFkb25seSBxdWVyeVBhcmFtc0NvZGU6IGJvb2xlYW47IH1cbi8qKiBAaW50ZXJuYWwgKi9cbmludGVyZmFjZSBJU2VydmVyUmVzcG9uc2VTdGF0ZSB7IHJlYWRvbmx5IGFjY2Vzc1Rva2VuPzogc3RyaW5nOyBlcnJvcj86IHN0cmluZ31cbi8qKiBAaW50ZXJuYWwgKi9cbmludGVyZmFjZSBJU2VydmVyUmVzcG9uc2Uge1xuICAgIHJlYWRvbmx5IGVtYWlsPzogc3RyaW5nO1xuICAgIGVycm9yPzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNvZGU6IHN0cmluZztcbiAgICByZWFkb25seSBzY29wZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNsaWVudF9pZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGFwaVVybDogc3RyaW5nO1xuICAgIHJlc3BvbnNlU3RhdGU6IElTZXJ2ZXJSZXNwb25zZVN0YXRlO1xuICAgIHNldFJlc3BvbnNlU3RhdGU6IGFueTsgLy8gVE9ET1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgU0VSVkVSX1JFU1BPTlNFX1NUQVRFID0geyB9O1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgREVGQVVMVF9HT09HTEVfQVVUSF9TVEFURSA9IHsgcXVlcnlQYXJhbXNDb2RlOiBmYWxzZSB9O1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgYnV0dG9uU3R5bGluZzogVHlwZUJ1dHRvblN0eWxlcyA9IHtcbiAgICBiYWNrZ3JvdW5kU2l6ZTogXCIyMHB4IDIwcHhcIixcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogXCIxMnB4IDEwcHhcIixcbiAgICB0ZXh0SW5kZW50OiBcIjE5cHhcIixcbiAgICBib3JkZXI6IFwiMXB4IHNvbGlkICNiZGMzYzdcIixcbiAgICBwYWRkaW5nOiBcIjlweCAyM3B4XCIsXG4gICAgYm9yZGVyUmFkaXVzOiBcIjlweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCIjYmRjM2M3XCIsXG4gICAgZm9udFNpemU6IFwiMThweFwiLFxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IEdvb2dsZUF1dGhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxJR29vZ2xlQXV0aENvbnRleHQ+KERFRkFVTFRfR09PR0xFX0FVVEhfU1RBVEUpO1xuZXhwb3J0IGNvbnN0IEdvb2dsZUF1dGggPSBHb29nbGVBdXRoQ29udGV4dC5Qcm92aWRlcjtcbmV4cG9ydCBjb25zdCBHb29nbGVBdXRoQ29uc3VtZXIgPSBHb29nbGVBdXRoQ29udGV4dC5Db25zdW1lcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IF9nZXRCYWNrZ3JvdW5kSW1nID0gKHBsYWNlaG9sZGVyOiBzdHJpbmcsIHN0eWxlczogVHlwZUJ1dHRvblN0eWxlcyk6IFR5cGVCdXR0b25TdHlsZXMgPT4ge1xuICAgIGlmKHBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnN0eWxlcywgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7cGxhY2Vob2xkZXJ9KWAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlcztcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBJbm5lckJ1dHRvbiA9IChwcm9wczogSUdvb2dsZUJ1dHRvbiAmIHsgZXJyb3I/OiBzdHJpbmd9ICYgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgeyBwbGFjZWhvbGRlciA9IFwiXCIsIGRlZmF1bHRTdHlsZSA9IHRydWUsIG9wdGlvbnMsIGRpc3BsYXlFcnJvcnMgPSBmYWxzZSB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBzY29wZXMgPSBBdXRob3JpemF0aW9uLmNyZWF0ZVNjb3BlcyhvcHRpb25zLnNjb3Blcyk7XG4gICAgY29uc3QgYXV0aCA9IG5ldyBBdXRob3JpemF0aW9uKG9wdGlvbnMsIHNjb3Blcyk7XG4gICAgYXV0aC5jcmVhdGVBdXRob3JpemF0aW9uUmVxdWVzdFVSTCgpO1xuXG4gICAgY29uc3Qgc3R5bGVzID0gZGVmYXVsdFN0eWxlID8gX2dldEJhY2tncm91bmRJbWcocGxhY2Vob2xkZXIsIGJ1dHRvblN0eWxpbmcpIDogdW5kZWZpbmVkO1xuICAgIGlmKHByb3BzLmVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC1Hb29nbGUtT0F1dGgyXSBFcnJvcjogJHtwcm9wcy5lcnJvcn1cbiAgICAgICAgIC0gVG8gZGlzcGxheSB0aGUgZXJyb3IgdG8gdGhlIHVzZXIsIHNldCBJR29vZ2xlUHJvcHMgZGlzcGxheUVycm9ycyB0byB0cnVlLlxuICAgICAgICAgU2VlIGh0dHBzOi8vam9lZ2FzZXdpY3ouZ2l0aHViLmlvL3JlYWN0LWdvb2dsZS1vYXV0aDIuMC9gKTtcbiAgICB9XG4gICAgcmVtb3ZlT0F1dGhRdWVyeVBhcmFtcygpO1xuICAgIHJldHVybiA8PlxuICAgICAgICA8YnV0dG9uIHN0eWxlPXtzdHlsZXN9IG9uQ2xpY2s9e2F1dGgucmVkaXJlY3R9ID5TaWduIGluIHdpdGggZ29vZ2xlPC9idXR0b24+XG4gICAgICAgIHsocHJvcHMuZGlzcGxheUVycm9ycyAmJiBwcm9wcy5lcnJvcikgJiYgPGRpdj57cHJvcHMuZXJyb3J9PC9kaXY+fVxuICAgIDwvPlxufVxuLyoqXG4gKiBAZXhhbXBsZVxuICogKipRdWljayBTdGFydDoqKlxuICpcbiAqIEZpcnN0IGNyZWF0ZSBhbiBvcHRpb25zIG9iamVjdCB0aGF0IGltcGxlbWVudHMgYW4ge0BsaW5rICBJQXV0aG9yaXphdGlvbk9wdGlvbnN9IHR5cGUuXG4gKiBDaGVjayB0aGUge0BsaW5rICBJQXV0aG9yaXphdGlvbk9wdGlvbnN9IGFuZCB7QGxpbmsgIElBdXRob3JpemF0aW9uQmFzZX0gdHlwZXMgZm9yXG4gKiBhbGwgcmVxdWlyZWQgcHJvcGVydGllcy4gVGhlbiwgcGFzcyB0aGUgb3B0aW9ucyB0byB0aGUge0BsaW5rIEdvb2dsZUJ1dHRvbn0gY29tcG9uZW50LlxuICpcbiAqIGBgYElBdXRob3JpemF0aW9uT3B0aW9uc1xuICogIGNvbnN0IG9wdGlvbnM6ICA9IHtcbiAqICAgICAgY2xpZW50SWQ6IChwcm9jZXNzLmVudi5DTElFTlRfSUQgYXMgc3RyaW5nKSxcbiAqICAgICAgIHJlZGlyZWN0VXJpOiBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiLFxuICogICAgICAgc2NvcGVzOiBbXCJvcGVuaWRcIiwgXCJwcm9maWxlXCIsIFwiZW1haWxcIl0sXG4gKiAgICAgICBpbmNsdWRlR3JhbnRlZFNjb3BlczogdHJ1ZSxcbiAqICAgICAgIGFjY2Vzc1R5cGU6IFwib2ZmbGluZVwiLFxuICogICB9O1xuICpcbiAqICAgPEdvb2dsZUJ1dHRvblxuICogICAgICAgICBwbGFjZWhvbGRlcj1cImRlbW8vc2VhcmNoLnBuZ1wiXG4gKiAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gKiAgICAgICAgIGFwaVVybD1cImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9nb29nbGVfbG9naW5cIlxuICogICAvPlxuICogYGBgXG4gKiBAcGFyYW0gcHJvcHMgc2VlIElHb29nbGVCdXR0b25cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgY29uc3QgR29vZ2xlQnV0dG9uID0gKHByb3BzOiBJR29vZ2xlQnV0dG9uICYgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgeyBjYWxsYmFjayB9ID0gcHJvcHM7XG4gICAgY29uc3QgW3Jlc3BvbnNlU3RhdGUsIHNldFJlc3BvbnNlU3RhdGVdID0gdXNlU3RhdGU8SVNlcnZlclJlc3BvbnNlU3RhdGU+KFNFUlZFUl9SRVNQT05TRV9TVEFURSk7XG4gICAgY29uc3QgY3VycmVudFVybCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgY29uc3QgcXVlcnlQYXJhbXNDb2RlID0gY3VycmVudFVybC5nZXQoXCJjb2RlXCIpO1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zRXJyb3IgPSBjdXJyZW50VXJsLmdldChcImVycm9yXCIpO1xuICAgIGlmKHJlc3BvbnNlU3RhdGUuYWNjZXNzVG9rZW4gJiYgIWlzTG9nZ2VkSW4oKSkge1xuICAgICAgICBzdG9yZUFjY2Vzc1Rva2VuKHJlc3BvbnNlU3RhdGUuYWNjZXNzVG9rZW4pO1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiYGFjY2Vzc1Rva2VuYCBzZXQgaW4gbG9jYWwgc3RvcmFnZS5cIilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChyZXNwb25zZVN0YXRlLmVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWFjdC1Hb29nbGUtT0F1dGgyXSBFcnJvcjogQXBpIGNhbGwgZmFpbGVkIHdpdGggJHtyZXNwb25zZVN0YXRlLmVycm9yfSBlcnJvci5gKTtcbiAgICAgICAgcmV0dXJuIDxJbm5lckJ1dHRvbiB7Li4ucHJvcHN9IGVycm9yPXtyZXNwb25zZVN0YXRlLmVycm9yfSAvPjtcbiAgICB9IGVsc2UgaWYgKHF1ZXJ5UGFyYW1zQ29kZSAmJiAhaXNMb2dnZWRJbigpKSB7XG4gICAgICAgIC8vIEdldCByZXN0IG9mIHBhcmFtc1xuICAgICAgICBjb25zdCBxdWVyeVBhcmFtc0VtYWlsID0gY3VycmVudFVybC5nZXQoXCJlbWFpbFwiKSB8fCBcIlwiO1xuICAgICAgICBjb25zdCBxdWVyeVBhcmFtc1Njb3BlID0gY3VycmVudFVybC5nZXQoXCJzY29wZVwiKSB8fCBcIlwiO1xuICAgICAgICBjb25zdCBzZXJ2ZXJSZXNwb25zZVByb3BzOiBJU2VydmVyUmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBlbWFpbDogcXVlcnlQYXJhbXNFbWFpbCxcbiAgICAgICAgICAgIHNjb3BlOiBxdWVyeVBhcmFtc1Njb3BlLFxuICAgICAgICAgICAgY29kZTogcXVlcnlQYXJhbXNDb2RlLFxuICAgICAgICAgICAgY2xpZW50X2lkOiBwcm9wcy5vcHRpb25zLmNsaWVudElkLFxuICAgICAgICAgICAgYXBpVXJsOiBwcm9wcy5hcGlVcmwsXG4gICAgICAgICAgICByZXNwb25zZVN0YXRlLFxuICAgICAgICAgICAgc2V0UmVzcG9uc2VTdGF0ZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVtb3ZlT0F1dGhRdWVyeVBhcmFtcygpO1xuICAgICAgICBzZXJ2ZXJSZXNwb25zZShzZXJ2ZXJSZXNwb25zZVByb3BzKTtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIldhaXRpbmcgZm9yIHJlbW90ZSBhcGkgcmVzcG9uc2VcIik7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayA/IGNhbGxiYWNrKCkgOiA8PkxvYWRpbmcuLi48Lz47XG4gICAgfSBlbHNlIGlmKHF1ZXJ5UGFyYW1zRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3I6IEdvb2dsZSBsb2dpbiBhdHRlbXB0IGZhaWxlZCB3aXRoICR7cXVlcnlQYXJhbXNFcnJvcn0gZXJyb3IuYClcbiAgICAgICAgcmV0dXJuIDxJbm5lckJ1dHRvbiB7Li4ucHJvcHN9IGVycm9yPXtxdWVyeVBhcmFtc0Vycm9yfSAvPjtcbiAgICB9XG4gICAgLy8gRGlzcGxheSBidXR0b24gd2l0aCBubyBlcnJvcnNcbiAgICByZXR1cm4gPElubmVyQnV0dG9uIHsuLi5wcm9wc30gLz47XG59XG4iXSwic291cmNlUm9vdCI6IiJ9