module.exports=function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t){e.exports=require("react")},function(e,t,o){"use strict";o.r(t),o.d(t,"GoogleButton",(function(){return R})),o.d(t,"isLoggedIn",(function(){return i})),o.d(t,"logOutOAuthUser",(function(){return s})),o.d(t,"createOAuthHeaders",(function(){return l})),o.d(t,"GoogleAuth",(function(){return x})),o.d(t,"GoogleAuthConsumer",(function(){return w})),o.d(t,"getAccessToken",(function(){return u})),o.d(t,"setPrompt",(function(){return _})),o.d(t,"exchangeToken",(function(){return f}));var n=function(){return(n=Object.assign||function(e){for(var t,o=1,n=arguments.length;o<n;o++)for(var r in t=arguments[o])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},r=function(e,t,o,n){return new(o||(o=Promise))((function(r,c){function a(e){try{s(n.next(e))}catch(e){c(e)}}function i(e){try{s(n.throw(e))}catch(e){c(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,i)}s((n=n.apply(e,t||[])).next())}))},c=function(e,t){var o,n,r,c,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return c={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function i(i){return function(s){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;c&&(c=0,i[0]&&(a=0)),a;)try{if(o=1,n&&(r=2&i[0]?n.return:i[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,i[1])).done)return r;switch(n=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{o=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function a(e){var t=e.code;(function(e,t){return r(this,void 0,void 0,(function(){return c(this,(function(o){switch(o.label){case 0:return[4,fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})];case 1:return[2,o.sent().json()]}}))}))})(e.apiUrl,{code:t,scope:e.scope}).then((function(t){"access_token"in t?e.setResponseState({accessToken:t.access_token}):e.setResponseState({error:"so access_token in response data!"})})).catch((function(t){e.setResponseState({error:t.message})}))}function i(){return!!window.localStorage.getItem("accessToken")}function s(){window.localStorage.removeItem("accessToken")}function u(){return window.localStorage.getItem("accessToken")}function l(e){var t={};return e&&(t={"X-Auth-Resource":e}),n(n({},t),{"X-Auth-Token":"Bearer ".concat(u())})}function p(){var e=document.location.href;if(document.location.search){var t=e.substring(0,e.indexOf("?"));window.history.replaceState({},document.title,t)}}function f(e,t,o){var n="".concat("https://oauth2.googleapis.com/token","?");return n+="client_id=".concat(e),n+="&grant_type=refresh_token",n+="&refresh_token=".concat(t),n+="&client_secret=".concat(o),fetch(n,{method:"POST"}).then((function(e){return e.json().then((function(e){if(e.error)throw new Error(e.error);return window.localStorage.setItem("accessToken",e.access_token),e.access_token}))})).catch((function(e){throw console.debug(e),new Error("Failed to refresh access token")}))}var d,h=o(0),g=o.n(h);!function(e){e.GOOGLE_OAUTH_ENDPOINT="https://accounts.google.com/o/oauth2/v2/auth"}(d||(d={}));var b=function(){function e(e,t){var o=this;this.redirect=function(e){if(!o.googleRedirectURL)throw new ReferenceError("Error creating redirect url to Google's authorization server");window.location.replace(o.googleRedirectURL)},this.params=e,this.scopesStr=t}return Object.defineProperty(e.prototype,"googleRedirectURL",{get:function(){return this._googleRedirectURL},set:function(e){this._googleRedirectURL=e},enumerable:!1,configurable:!0}),e.prototype.createAuthorizationRequestURL=function(){var e,t=this.params,o=t.accessType,n=void 0===o?"offline":o,r=t.includeGrantedScopes,c=void 0===r||r,a=t.responseType,i=void 0===a?"code":a,s=t.state,u=void 0===s?null:s,l=t.redirectUri,p=t.clientId,f=t.loginHint,h=t.prompt,g=d.GOOGLE_OAUTH_ENDPOINT;e="".concat(g,"?scope=").concat(this.scopesStr,"&"),e=n?"".concat(e,"access_type=").concat(n,"&"):e,e="".concat(e,"include_granted_scopes=").concat(c,"&"),e="".concat(e,"response_type=").concat(i,"&"),e=u?"".concat(e,"state=").concat(u,"&"):e,e=f?"".concat(e,"login_hint=").concat(f,"&"):e,e=h?"".concat(e,"prompt=").concat(h,"&"):e,e="".concat(e,"redirect_uri=").concat(l,"&"),e="".concat(e,"client_id=").concat(p),this.googleRedirectURL=e},e.createScopes=function(e){var t="";return e.map((function(o,n){e.length-1===n?t+="".concat(o):t+="".concat(o,"%20")})),t},e}(),v=function(){return(v=Object.assign||function(e){for(var t,o=1,n=arguments.length;o<n;o++)for(var r in t=arguments[o])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},m={},y={backgroundSize:"20px 20px",backgroundRepeat:"no-repeat",backgroundPosition:"12px 10px",textIndent:"19px",border:"1px solid #bdc3c7",padding:"9px 23px",borderRadius:"9px",backgroundColor:"#bdc3c7",fontSize:"18px"},O=g.a.createContext({setOAuthState:function(){},setOptions:function(){},setPrompt:function(){},setResponseState:function(){}}),S=O.Provider,w=O.Consumer,k=function(e){var t=e.placeholder,o=void 0===t?"":t,n=e.defaultStyle,r=void 0===n||n,c=e.options,a=e.displayErrors,i=void 0!==a&&a,s=b.createScopes(c.scopes),u=new b(c,s);u.createAuthorizationRequestURL();var l=r?function(e,t){return e?v(v({},t),{backgroundImage:"url(".concat(e,")")}):t}(o,y):void 0;return e.error&&console.error("[React-Google-OAuth2] Error: ".concat(e.error,"\n         - To display the error to the user, set IGoogleProps displayErrors to true.\n         See https://joegasewicz.github.io/react-google-oauth2.0/")),p(),g.a.createElement(g.a.Fragment,null,g.a.createElement("button",{style:l,onClick:u.redirect,className:"".concat(e.className," google-oauth-btn")},e.children),i&&e.error&&g.a.createElement("div",null,e.error))};function R(e){var t=e.callback,o=Object(h.useContext)(O),n=o.options,r=o.setOptions,c=o.responseState,s=o.setOAuthState,u=o.setResponseState,l=o.isAuthenticated,f=Object(h.useState)(),d=f[0],b=f[1],m=new URLSearchParams(window.location.search),y=m.get("code"),S=m.get("error");Object(h.useEffect)((function(){!n&&r&&r(e.options)}),[e.options]),Object(h.useEffect)((function(){c&&!Object.keys(c).length&&d&&a(d)}),[d,c]),Object(h.useEffect)((function(){var e;(null==c?void 0:c.accessToken)&&!i()&&(e=c.accessToken,window.localStorage.setItem("accessToken",e),console.debug("`accessToken` set in local storage."),"function"!=typeof s||l||s(!0))}),[null==c?void 0:c.accessToken]);var w=v(v({},e.options),n),R=g.a.createElement(k,v({},e,{placeholder:e.placeholder,error:null==c?void 0:c.error,options:w}));if(null==c?void 0:c.error)return console.error("[React-Google-OAuth2] Error: Api call failed with ".concat(null==c?void 0:c.error," error.")),R;if(y&&!i()){var _={email:m.get("email")||"",scope:m.get("scope")||"",code:y,client_id:e.options.clientId,apiUrl:e.apiUrl,responseState:c,setResponseState:u};return p(),c&&!Object.keys(c).length&&b(_),console.debug("Waiting for remote api response"),t?t():g.a.createElement(g.a.Fragment,null,"Loading...")}return S?(console.error("Error: Google login attempt failed with ".concat(S," error.")),R):R}function _(e,t){return function(o){t&&!t.prompt&&e(v(v({},t),{prompt:o}))}}var x=function(e){var t=Object(h.useState)(m),o=t[0],n=t[1],r=Object(h.useState)(i()),c=r[0],a=r[1],s=Object(h.useState)(),u=s[0],l=s[1],p={isAuthenticated:c,setOAuthState:a,responseState:o,setResponseState:n,options:u,setOptions:l,setPrompt:_(l,u)};return g.a.createElement(S,{value:p},e.children)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,